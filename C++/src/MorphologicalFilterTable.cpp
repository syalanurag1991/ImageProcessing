///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////// Author: Ganesh Ramdas Pillai, Anurag Syal ///////////////////////////////////////////////////////////////////////////////////////////////
///////// USC-ID: 9954-6583-64 (Anurag) ///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////// www.360otg.com //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "MorphologicalFilterTable.h"
using namespace std;

#define NUM_BITS 8

/////////////////////////////////////////////	MORPHOLIGICAL FILTER TABLE	/////////////////////////////////////////////////////////////////

uint8_t stage1_mask_bond[][10]      = { {0x02, 0x08, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 1
								    	{0x01, 0x04, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 2
								    	{0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x81, 0x00, 0x00}, // 3
								    	{0x05, 0x14, 0x50, 0x41, 0x83, 0x0E, 0x38, 0xE0, 0x00, 0x00}, // 4
								    	{0x0D, 0x85, 0x16, 0x43, 0x07, 0x1C, 0x70, 0xC1, 0x00, 0x00}, // 5
								    	{0x8D, 0x36, 0x0F, 0x87, 0x1E, 0x3C, 0x78, 0xF0, 0xE1, 0xC3}, // 6
								    	{0x8F, 0x3E, 0xF8, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 7
								    	{0xC7, 0x1F, 0x7C, 0xF1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 8
								    	{0xCF, 0xE7, 0x3F, 0x9F, 0x7E, 0xFC, 0xF9, 0xF3, 0x00, 0x00}, // 9
								    	{0xEF, 0xBF, 0xFE, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 10
								    	{0xDF, 0x7F, 0xFD, 0xF7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}  // 11
								      };  

uint8_t stage2_mask_shrinking[][39] = { {0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 1
	                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	                                     0x00, 0x00, 0x00},
										{0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 2
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00},
										{0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x81, 0x2a, 
										 0xa8, 0x8a, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //3
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00},
										{0x23, 0x8c, 0x62, 0x89, 0x26, 0x98, 0x32, 0xc8, 0x4a, 
										 0xaa, 0x29, 0xa4, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, // 4
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00},
										{0x16, 0x0d, 0x85, 0x43, 0x1c, 0x3a, 0x2e, 0x2b, 0x9a, 
										 0x8e, 0x8b, 0x6a, 0xca, 0xe8, 0xb8, 0xac, 0xa9, 0xe2, // 5
										 0xb2, 0xa3, 0xa6, 0x25, 0x94, 0x52, 0x49, 0x00, 0x00, 
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00},
										{0x27, 0x72, 0xc9, 0x9c, 0x3c, 0x1e, 0x15, 0x51, 0x54, 
										 0x45, 0x5a, 0x4e, 0x4b, 0xba, 0xae, 0xab, 0xea, 0x69, // 6
										 0x39, 0x2d, 0xe4, 0xb4, 0xa5, 0xd2, 0x96, 0x93, 0x00, 
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00},
										{0x5c, 0xbc, 0x9e, 0x3e, 0x1d, 0x35, 0x95, 0x17, 0xd1, 
										 0x53, 0x71, 0x59, 0x56, 0xd4, 0x74, 0xc5, 0x65, 0x4d, // 7
										 0x47, 0x3b, 0x2f, 0x9b, 0x8f, 0x7a, 0x6e, 0xda, 0xce, 
										 0xcb, 0xf8, 0xec, 0xe9, 0xb9, 0xad, 0xf2, 0xe3, 0xb3, 
										 0xe6, 0xb6, 0xa7},
										{0xdc, 0x7c, 0x5e, 0xbe, 0x9d, 0x3d, 0x1f, 0x97, 0xd3, 
										 0x79, 0xf4, 0xe5, 0x4f, 0x5b, 0xbb, 0xaf, 0xfa, 0xee, // 8
										 0xeb, 0x6d, 0xb5, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00},
										{0xfc, 0xde, 0x7e, 0x5d, 0xbd, 0x9f, 0x3f, 0x7b, 0x6f, 
										 0xdb, 0xcf, 0xf9, 0xed, 0xf3, 0xf6, 0xe7, 0xb7, 0x00, // 9
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00},
										{0xfe, 0xdd, 0x7d, 0x5f, 0xbf, 0xfb, 0xef, 0xf5, 0xd7, 
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 10 
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00},
										{0xfd, 0xdf, 0x7f, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 11
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
										 0x00, 0x00, 0x00}
									};


uint8_t stage2_mask_skeletonizing[][40] = { {0x80, 0x20, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 1
	                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
											{0x40, 0x01, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
											{0x2a, 0x8a, 0xa8, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 3
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
											{0x05, 0x14, 0x41, 0x50, 0x4a, 0xaa, 0x29, 0xa4, 0x92, 0x00, 
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 4
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
											{0x1c, 0xc1, 0x3a, 0x2e, 0x2b, 0x9a, 0x8e, 0x8b, 0x6a, 0xca, 
											 0xe8, 0xb8, 0xac, 0xa9, 0xe2, 0xb2, 0xa3, 0xa6, 0x25, 0x94,  // 5
											 0x52, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
											{0x9c, 0x3c, 0x1e, 0xe1, 0xc9, 0xc3, 0x15, 0x54, 0x51, 0x45, 
											 0x5a, 0x4e, 0x4b, 0xba, 0xae, 0xab, 0xea, 0x69, 0x39, 0x2d,  // 6
											 0xe4, 0x93, 0xa5, 0xb4, 0x96, 0xd2, 0x00, 0x00, 0x00, 0x00, 
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
											{0x5c, 0xbc, 0x9e, 0x3e, 0x1d, 0xd1, 0xe9, 0xc5, 0xe3, 0xcb, 
											 0x95, 0x35, 0x17, 0xd4, 0x74, 0x56, 0x71, 0x59, 0x53, 0x65,  // 7
											 0x4d, 0x47, 0x3b, 0x2f, 0x9b, 0x8f, 0x7a, 0x6e, 0x6b, 0xda, 
											 0xce, 0xf8, 0xb9, 0xec, 0xe6, 0xa7, 0xf2, 0xb3, 0xad, 0xb6},
											{0xdc, 0x7c, 0x5e, 0xbe, 0x9d, 0x3d, 0x1f, 0xf1, 0xd9, 0xe5, 
											 0xcd, 0xd3, 0xeb, 0xc7, 0x55, 0xb5, 0x97, 0x37, 0xf4, 0x76,  // 8
											 0x73, 0x67, 0x5b, 0x4f, 0x79, 0x6d, 0xd6, 0xee, 0xaf, 0xfa, 
											 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
											{0xfc, 0xde, 0x7e, 0x5d, 0xbd, 0x9f, 0x3f, 0xf9, 0xd5, 0xed, 
											 0xf3, 0xdb, 0xe7, 0xcf, 0x75, 0x57, 0xb7, 0xf6, 0x7b, 0x6f,  // 9
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
											{0xfe, 0xdd, 0x7d, 0x5f, 0xbf, 0xf5, 0xfb, 0xd7, 0xef, 0x77, 
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 10
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
											{0xfd, 0xdf, 0x7f, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 11
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
											 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
										  };

/*
typedef enum type_morphing {
	SHRINKING = 0x1,
	THINNING  = 0x2,
	SKELETONIZING = 0x4
} type_morphing;
*/

//Returns bond of an Input 3x3 Window or Mask
int find_bond_mask(uint8_t mask) {
	int iterator = 0;
	int bond = 0;
	while(iterator < 8) {
		bond += ((mask >> iterator) & 0x1)*(2 - iterator%2);
		++iterator;
	}
	return bond;
}

//Number of Mask for a given bond value - Stage 1
int get_num_elements_for_stage1_bond(int bond, type_morphing type)
{
	int num = 0;

	switch(bond) {
		case 1: 
		case 2: {
			if(type == SHRINKING) {
				num = 4;
			}
		} break;
		case 3: {
			if(type == SHRINKING) {
				num = 8;
			}
		} break;		
		case 4: {
			num = 8;
			if(type == SHRINKING) {
				num = 4;
			}
		} break;	
		case 5: {
			num = 8;
			if(type == SKELETONIZING) {
				num = 0;
			}
		} break;
		case 6: {
			num = 10;
			if(type == SKELETONIZING) {
				num = 8;
			}
		} break;					
		case 7:
		case 8:
		case 10: {
			num = 4;
		} break;
		case 9: {
			num = 8;
		} break;
		case 11: {
			if(type == SKELETONIZING) {
				num = 4;
			}
		} break;
		default: {
			printf("Unsupported bond value %d\n", bond);
		} break;
	}

	return num;
}

//Number of Masks for a given bond value - Stage 1
int get_num_elements_for_stage2_bond(int bond, type_morphing type)
{
	int num = 0;

	if((type == SHRINKING) || (type == THINNING)) {
		switch(bond) {
			case 1: num = 2; break;
			case 2: num = 2; break;
			case 3: num = 12; break;		
			case 4: num = 13; break;	
			case 5: num = 25; break;
			case 6: num = 26; break;					
			case 7: num = 39; break;
			case 8: num = 22; break;
			case 9: num = 17; break;
			case 10: num = 9; break;
			case 11: num = 4; break;
			default: {
				printf("Unsupported bond value %d\n", bond);
			} break;
		}
	} else { // SKELETONIZING
		switch(bond) {
			case 1: num = 4; break;
			case 2: num = 4; break;
			case 3: num = 4; break;		
			case 4: num = 9; break;	
			case 5: num = 22; break;
			case 6: num = 26; break;					
			case 7: num = 40; break;
			case 8: num = 31; break;
			case 9: num = 20; break;
			case 10: num = 10; break;
			case 11: num = 4; break;
			default: {
				printf("Unsupported bond value %d\n", bond);
			} break;
		}		
	}

	return num;
}

//Returns a Mask based on bond value, index and operation type (Shrinking, Thinning, Skeletonizing) - Stage 1
uint8_t get_stage1_mask_for_bond(int bond, int index, type_morphing type) 
{
	uint8_t mask = 0x0;

	if((bond == 4) && (type == SHRINKING)) {
		index += 4;
	} 
	if((bond == 6) && (type == SKELETONIZING)) {
		index += 2;
	}

	mask = stage1_mask_bond[bond-1][index];

	return mask;
}

//Returns a Mask based on bond value, index and operation type (Shrinking, Thinning, Skeletonizing) - Stage 1
uint8_t get_stage2_mask_for_bond(int bond, int index, type_morphing type) 
{
	uint8_t mask = 0x0;

	if((type == SHRINKING) || (type == THINNING))
		mask = stage2_mask_shrinking[bond-1][index];
	else
		mask = stage2_mask_skeletonizing[bond-1][index];

	return mask;
}

//Prints the Mask, for Debugging purpose
void print_mask(uint8_t mask) 
{
	printf("\n");
	printf("%u %u %u\n", ((mask >> 3) & 0x1), ((mask >> 2) & 0x1), ((mask >> 1) & 0x1));
	printf("%u %u %u\n", ((mask >> 4) & 0x1), (0x1), ((mask >> 0) & 0x1));
	printf("%u %u %u\n", ((mask >> 5) & 0x1), ((mask >> 6) & 0x1), ((mask >> 7) & 0x1));
}

//Prints the whole table - Shrinking, Thinning, Skeletonizing
void print_mask_table()
{
	int bond = 1;
	int pbond = 0;
	int iterator = 0;
	uint8_t mask = 0x0;
	int num = 0;

	/* Printing mask table for SHRINKING stage 1 */
	type_morphing type = SHRINKING;
	printf("Printing SHRINKING masks:\n");
	while(bond < 12) {
		
		/* Get the number of masks for the bond */
		num = get_num_elements_for_stage1_bond(bond, type);
		if(num > 0) {
			printf("\n\nBond: %d\n", bond);
			iterator = 0;
			while(iterator < num) {
				/* Get each mask individually */
				mask = get_stage1_mask_for_bond(bond, iterator, type);
				/* Print the mask for convinient checking */
				print_mask(mask);
				++iterator;
			}

			/* Get the bond from mask for verification */
			pbond = find_bond_mask(mask);
			printf("Printed bond: %d\n", pbond);
		}
		++bond;
	}
	printf("\n");

	/* Printing mask table for THINNING stage 1 */
	type = THINNING;
	printf("Printing THINNING masks:\n");
	bond = 1;
	while(bond < 12) {
		
		/* Get the number of masks for the bond */
		num = get_num_elements_for_stage1_bond(bond, type);
		if(num > 0) {
			printf("\n\nBond: %d\n", bond);
			iterator = 0;
			while(iterator < num) {
				/* Get each mask individually */
				mask = get_stage1_mask_for_bond(bond, iterator, type);
				/* Print the mask for convinient checking */
				print_mask(mask);
				++iterator;
			}

			/* Get the bond from mask for verification */
			pbond = find_bond_mask(mask);
			printf("Printed bond: %d\n", pbond);
		}
		++bond;
	}
	printf("\n");

	/* Printing mask table for SKELETONIZING stage 1 */
	type = SKELETONIZING;
	printf("Printing SKELETONIZING masks:\n");
	bond = 1;
	while(bond < 12) {
		
		
		/* Get the number of masks for the bond */
		num = get_num_elements_for_stage1_bond(bond, type);
		if(num > 0) {
			printf("\n\nBond: %d\n", bond);
			iterator = 0;
			while(iterator < num) {
				/* Get each mask individually */
				mask = get_stage1_mask_for_bond(bond, iterator, type);
				/* Print the mask for convinient checking */
				print_mask(mask);
				++iterator;
			}

			/* Get the bond from mask for verification */
			pbond = find_bond_mask(mask);
			printf("Printed bond: %d\n", pbond);
		}
		++bond;
	}


	/* Printing mask table for SHRINKING stage 2 */
	printf("\n\n\nMasks for Stage 2 of SHRINKING and THINNING\n");
	bond = 1;
	type = SHRINKING;
	while(bond < 12) {

		/* Get the number of masks for the bond */
		num = get_num_elements_for_stage2_bond(bond, type);
		if(num > 0) {
			printf("\n\nBond: %d\n", bond);
			iterator = 0;
			while(iterator < num) {
				/* Get each mask individually */
				mask = get_stage2_mask_for_bond(bond, iterator, type);
				/* Print the mask for convinient checking */
				print_mask(mask);
				++iterator;
			}

			/* Get the bond from mask for verification */
			pbond = find_bond_mask(mask);
			printf("Printed bond: %d\n", pbond);
		}
		++bond;		
	}

	/* Printing mask table for SKELETONIZING stage 2 */
	printf("\n\n\nMasks for Stage 2 of SKELETONIZING\n");
	bond = 1;
	type = SKELETONIZING;
	while(bond < 12) {

		/* Get the number of masks for the bond */
		num = get_num_elements_for_stage2_bond(bond, type);
		if(num > 0) {
			printf("\n\nBond: %d\n", bond);
			iterator = 0;
			while(iterator < num) {
				/* Get each mask individually */
				mask = get_stage2_mask_for_bond(bond, iterator, type);
				/* Print the mask for convinient checking */
				print_mask(mask);
				++iterator;
			}

			/* Get the bond from mask for verification */
			pbond = find_bond_mask(mask);
			printf("Printed bond: %d\n", pbond);
		}
		++bond;		
	}

}